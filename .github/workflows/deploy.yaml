name: Java CI with Gradle and CD with Docker

on:
  pull_request:
    branches:
      - "main"
    types:
      - closed

jobs:
  create-release:
    if: github.event.pull_request.merge == true
    runs-on: ubuntu-latest
    permissions:
      contents: write

    outputs:
      new_tag: ${{ steps.tag_version.outputs.new_tag }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Bump version and push tag
        id: tag_version
        uses: mathieudutour/github-tag-action@v6.2
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Create a GitHub release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.tag_version.outputs.new_tag }}
          release_name: Release ${{ steps.tag_version.outputs.new_tag }}
          body: ${{ steps.tag_version.outputs.changelog }}

  build-spring-and-docker-image:
    needs: ["create-release"]
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - uses: actions/checkout@v4
        with: ${{ secret.GH_PAT }}
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: "17"
          distribution: "temurin"
          cache: "gradle"

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v3

      - name: Build with Gradle Wrapper
        run: ./gradlew build

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_ACCOUNT }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and Push Docker Image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKERHUB_ACCOUNT }}/${{ secrets.DOCKERHUB_REPOSITORY }}:${{ needs.create-release.outputs.new_tag }}
          platforms: |
            linux/amd64
            linux/arm64

  deploy-new-container:
    runs-on: ubuntu-latest
    needs: ["build-spring-and-docker-image"]
    steps:
      - name: Deploy a new version of the container
        uses: peterkimzz/aws-ssm-send-command@master
        id: ssm-deploy-new-container
        with:
          aws-region: ${{ secrets.AWS_REGION }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          instance-ids: ${{ secrets.BACKEND_INSTANCE_ID }}

          working-directory: ${{ secrets.BACKEND_WORKING_DIRECTORY }}
          command: /bin/bash ./git-pull.sh; /bin/bash ./deploy.sh ${{ secrets.DOCKERHUB_ACCOUNT }}/${{ secrets.DOCKERHUB_REPOSITORY }}:${{ needs.create-release.outputs.new_tag }}
          comment: Deploy a New Version of the Container

      - name: Change the backend container server in nginx
        uses: peterkimzz/aws-ssm-send-command@master
        id: ssm-change-nginx-server
        with:
          aws-region: ${{ secrets.AWS_REGION }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          instance-ids: ${{ secrets.NGINX_INSTANCE_ID }}

          working-directory: ${{ secrets.NGINX_WORKING_DIRECTORY }}
          command: /bin/bash ./deploy.sh
          comment: Change the backend container server in nginx

      - name: Turn off the previous container
        uses: peterkimzz/aws-ssm-send-command@master
        id: ssm-turn-off-previous-container
        with:
          aws-region: ${{ secrets.AWS_REGION }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          instance-ids: ${{ secrets.INSTANCE_ID }}

          working-directory: ${{ secrets.BACKEND_WORKING_DIRECTORY }}
          command: /bin/bash ./down-running-container.sh
          comment: Turn off the previous container
